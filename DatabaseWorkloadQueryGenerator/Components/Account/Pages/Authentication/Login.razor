@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using DatabaseWorkloadQueryGenerator.Components.Account.Logic
@using DatabaseWorkloadQueryGenerator.Core.Entities.Users
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>
<div class="sm:mx-auto sm:w-full sm:max-w-sm">
    <h2 class="mt-4 text-center text-2xl/9 font-bold tracking-tight text-gray-900">Sign in to your account</h2>
</div>
<div class="mt-10 sm:mx-auto sm:w-full sm:max-w-sm">
    <StatusMessage Message="@errorMessage" />
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator />
        <div class="form-control w-full mb-4">
            <label class="label" for="email">
                <span class="label-text">Email</span>
            </label>
            <InputText @bind-Value="Input.Email" class="input input-bordered w-full" autocomplete="username" aria-required="true" placeholder="name@example.com" />
            <ValidationMessage For="() => Input.Email" class="text-red-500" />
        </div>
        <div class="form-control w-full mb-4">
            <label class="label" for="password">
                <span class="label-text">Password</span>
            </label>
            <InputText type="password" @bind-Value="Input.Password" class="input input-bordered w-full" autocomplete="current-password" aria-required="true" placeholder="password" />
            <ValidationMessage For="() => Input.Password" class="text-red-500" />
        </div>
        <div class="form-control mb-4">
            <p>
                <a href="Account/ForgotPassword" class="link link-primary">Forgot your password?</a>
            </p>
            <label class="label cursor-pointer">
                <InputCheckbox @bind-Value="Input.RememberMe" class="checkbox checkbox-primary" />
                <span class="label-text ml-2">Remember me</span>
            </label>
        </div>
        <div class="form-control mb-4">
            <button type="submit" class="btn btn-primary w-full">Log in</button>
        </div>
        <div class="text-sm space-y-2">
            <p>
                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="link link-primary">Register as a new user</a>
            </p>
            <p>
                <a href="Account/ResendEmailConfirmation" class="link link-primary">Resend Email Confirmation</a>
            </p>
        </div>
    </EditForm>
    <hr class="my-4" />
    <ExternalLoginPicker />
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
