@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using DatabaseWorkloadQueryGenerator.Components.Account.Logic
@using DatabaseWorkloadQueryGenerator.Core.Entities.Users
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Reset password</PageTitle>

<div class="sm:mx-auto sm:w-full sm:max-w-sm">
    <h2 class="mt-4 text-center text-2xl/9 font-bold tracking-tight text-gray-900">Resend Email Confirmation</h2>
</div>
<div class="mt-10 sm:mx-auto sm:w-full sm:max-w-sm">
    <StatusMessage Message="@Message" />
    <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-red-500" role="alert" />
        <input type="hidden" name="Input.Code" value="@Input.Code" />
        <div class="form-control w-full mb-4">
            <label class="label" for="email">
                <span class="label-text">Email</span>
            </label>
            <InputText @bind-Value="Input.Email" class="input input-bordered w-full" autocomplete="username" aria-required="true" placeholder="name@example.com" />
            <ValidationMessage For="() => Input.Email" class="text-red-500" />
        </div>

        <div class="form-control w-full mb-4">
            <label class="label" for="password">
                <span class="label-text">Password</span>
            </label>
            <InputText type="password" @bind-Value="Input.Password" class="input input-bordered w-full" autocomplete="new-password" aria-required="true" placeholder="Please enter your password." />
            <ValidationMessage For="() => Input.Password" class="text-red-500" />
        </div>

        <div class="form-control w-full mb-4">
            <label class="label" for="confirm-password">
                <span class="label-text">Confirm Password</span>
            </label>
            <InputText type="password" @bind-Value="Input.ConfirmPassword" class="input input-bordered w-full" autocomplete="new-password" aria-required="true" placeholder="Please confirm your password." />
            <ValidationMessage For="() => Input.ConfirmPassword" class="text-red-500" />
        </div>

        <button type="submit" class="btn btn-primary w-full">Reset</button>
    </EditForm>
    <p class="text-center mb-2 mt-4">
        <a href="/Account/Login" class="link link-primary">Back To Login</a>
    </p>
</div>


@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}
